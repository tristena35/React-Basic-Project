{"ast":null,"code":"var _jsxFileName = \"/Users/tristenaguilar/Documents/React-Course/react-complete-guide/src/App.js\";\nimport React, { Component } from 'react'; //React hooks are using 'useSomething'\n\nimport Person from './Person/Person';\nimport styled from 'styled-components';\nimport './App.css';\nconst StyleButton = styled.button`\n  background-color: green;\n  color: white;\n  font: inherit;\n  border:'1x solid blue;\n  padding: '8px',\n  cursor: 'pointer',\n  ':hover': { // Radium feature\n    backgroundColor: 'lightgreen',\n    color: 'black'\n  }\n`;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Returns 2 elements (currentState, functionToUpdateState)\n      persons: [{\n        id: '1',\n        name: 'Max',\n        age: 28\n      }, {\n        id: '2',\n        name: 'Trist',\n        age: 29\n      }, {\n        id: '3',\n        name: 'Louis',\n        age: 26\n      }],\n      otherState: 'Some other value',\n      showPersons: false\n    };\n\n    this.nameChangeHandler = (event, id) => {\n      // Gets the index of the passed through person \n      const personIndex = this.state.persons.findIndex(p => {\n        return p.id === id;\n      }); // Creates person variable and gets individual person from provided index\n\n      const person = { ...this.state.persons[personIndex]\n      }; // Changes the name of the person chosen to be the name hard-coded\n\n      person.name = event.target.value; // Assigns copies persons array to persons Const\n\n      const persons = [...this.state.persons]; // Assigns individual person to matching person\n\n      persons[personIndex] = person;\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.deletePersonHandler = personIndex => {\n      //const persons = this.state.persons.slice(); --> Slice without args, copies array\n      const persons = [...this.state.persons]; // More modern way to copying array\n\n      persons.splice(personIndex, 1); // Removes 1 person from array\n\n      this.setState({\n        persons: persons\n      });\n    };\n\n    this.togglePersonsHandler = () => {\n      // This gets true or false for if person is to show\n      const doesShow = this.state.showPersons; // Sets the opposite state accordingly\n\n      this.setState({\n        showPersons: !doesShow\n      });\n    };\n  }\n\n  render() {\n    // Inline Styling\n    const buttonStyle = {\n      backgroundColor: 'green',\n      color: 'white',\n      font: 'inherit',\n      border: '1x solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': {\n        // Radium feature\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    }; //persons will hold div information\n\n    let persons = null; // Here, a list of persons will be rendered to the DOM\n\n    if (this.state.showPersons) {\n      // if TRUE\n      persons = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      }, this.state.persons.map((person, index) => {\n        return /*#__PURE__*/React.createElement(Person, {\n          click: () => this.deletePersonHandler(index),\n          name: person.name,\n          age: person.age,\n          key: person.id,\n          changed: event => this.nameChangeHandler(event, person.id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 20\n          }\n        }); // Key helps only the elements that changed to re-render, not the whole list\n      }));\n      buttonStyle.backgroundColor = 'red';\n      buttonStyle[':hover'] = {\n        backgroundColor: 'pink',\n        color: 'black'\n      };\n    } // const --> Never assigning new value | let --> Variable could change\n\n\n    const classes = [];\n\n    if (this.state.persons.length <= 2) {\n      classes.push('red'); // classes = ['red']\n    }\n\n    if (this.state.persons.length <= 1) {\n      classes.push('bold'); // classes = ['red', 'bold']\n    } // classes.join(' ') --> will join the class names as a string\n\n\n    return (\n      /*#__PURE__*/\n      // JSX Code Below, not HTML\n      React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }\n      }, \"Hi, I am a React app\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: classes.join(' '),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 9\n        }\n      }, \"This is really working!\"), /*#__PURE__*/React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.togglePersonsHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }\n      }, \"Switch Name\"), persons)\n    );\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tristenaguilar/Documents/React-Course/react-complete-guide/src/App.js"],"names":["React","Component","Person","styled","StyleButton","button","App","state","persons","id","name","age","otherState","showPersons","nameChangeHandler","event","personIndex","findIndex","p","person","target","value","setState","deletePersonHandler","splice","togglePersonsHandler","doesShow","render","buttonStyle","backgroundColor","color","font","border","padding","cursor","map","index","classes","length","push","join"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAA0C;;AAC1C,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,WAAP;AAEA,MAAMC,WAAW,GAAGD,MAAM,CAACE,MAAO;;;;;;;;;;;CAAlC;;AAaA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BM,KAF0B,GAElB;AAAE;AACRC,MAAAA,OAAO,EAAE,CACP;AAAEC,QAAAA,EAAE,EAAE,GAAN;AAAWC,QAAAA,IAAI,EAAE,KAAjB;AAAwBC,QAAAA,GAAG,EAAE;AAA7B,OADO,EAEP;AAAEF,QAAAA,EAAE,EAAE,GAAN;AAAWC,QAAAA,IAAI,EAAE,OAAjB;AAA0BC,QAAAA,GAAG,EAAE;AAA/B,OAFO,EAGP;AAAEF,QAAAA,EAAE,EAAE,GAAN;AAAWC,QAAAA,IAAI,EAAE,OAAjB;AAA0BC,QAAAA,GAAG,EAAE;AAA/B,OAHO,CADH;AAMNC,MAAAA,UAAU,EAAE,kBANN;AAONC,MAAAA,WAAW,EAAE;AAPP,KAFkB;;AAAA,SAwB1BC,iBAxB0B,GAwBN,CAAEC,KAAF,EAASN,EAAT,KAAiB;AAEnC;AACA,YAAMO,WAAW,GAAG,KAAKT,KAAL,CAAWC,OAAX,CAAmBS,SAAnB,CAA8BC,CAAC,IAAI;AACrD,eAAOA,CAAC,CAACT,EAAF,KAASA,EAAhB;AACD,OAFmB,CAApB,CAHmC,CAOnC;;AACA,YAAMU,MAAM,GAAG,EACb,GAAG,KAAKZ,KAAL,CAAWC,OAAX,CAAmBQ,WAAnB;AADU,OAAf,CARmC,CAYnC;;AACAG,MAAAA,MAAM,CAACT,IAAP,GAAcK,KAAK,CAACK,MAAN,CAAaC,KAA3B,CAbmC,CAenC;;AACA,YAAMb,OAAO,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,OAAf,CAAhB,CAhBmC,CAkBnC;;AACAA,MAAAA,OAAO,CAACQ,WAAD,CAAP,GAAuBG,MAAvB;AAEA,WAAKG,QAAL,CAAc;AAAEd,QAAAA,OAAO,EAAEA;AAAX,OAAd;AAED,KA/CyB;;AAAA,SAiD1Be,mBAjD0B,GAiDHP,WAAD,IAAiB;AACrC;AACA,YAAMR,OAAO,GAAG,CAAC,GAAG,KAAKD,KAAL,CAAWC,OAAf,CAAhB,CAFqC,CAEI;;AACzCA,MAAAA,OAAO,CAACgB,MAAR,CAAeR,WAAf,EAA4B,CAA5B,EAHqC,CAGL;;AAChC,WAAKM,QAAL,CAAc;AAACd,QAAAA,OAAO,EAAEA;AAAV,OAAd;AACD,KAtDyB;;AAAA,SAwD1BiB,oBAxD0B,GAwDH,MAAM;AAC3B;AACA,YAAMC,QAAQ,GAAG,KAAKnB,KAAL,CAAWM,WAA5B,CAF2B,CAG3B;;AACA,WAAKS,QAAL,CAAc;AAACT,QAAAA,WAAW,EAAE,CAACa;AAAf,OAAd;AACD,KA7DyB;AAAA;;AA+D1BC,EAAAA,MAAM,GAAI;AAER;AACA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,eAAe,EAAE,OADC;AAElBC,MAAAA,KAAK,EAAC,OAFY;AAGlBC,MAAAA,IAAI,EAAE,SAHY;AAIlBC,MAAAA,MAAM,EAAC,eAJW;AAKlBC,MAAAA,OAAO,EAAE,KALS;AAMlBC,MAAAA,MAAM,EAAE,SANU;AAOlB,gBAAU;AAAE;AACVL,QAAAA,eAAe,EAAE,YADT;AAERC,QAAAA,KAAK,EAAE;AAFC;AAPQ,KAApB,CAHQ,CAgBR;;AACA,QAAItB,OAAO,GAAG,IAAd,CAjBQ,CAkBR;;AACA,QAAK,KAAKD,KAAL,CAAWM,WAAhB,EAA8B;AAAE;AAC9BL,MAAAA,OAAO,gBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKD,KAAL,CAAWC,OAAX,CAAmB2B,GAAnB,CAAuB,CAAChB,MAAD,EAASiB,KAAT,KAAmB;AACzC,4BAAO,oBAAC,MAAD;AACL,UAAA,KAAK,EAAI,MAAM,KAAKb,mBAAL,CAAyBa,KAAzB,CADV;AAEL,UAAA,IAAI,EAAIjB,MAAM,CAACT,IAFV;AAGL,UAAA,GAAG,EAAIS,MAAM,CAACR,GAHT;AAIL,UAAA,GAAG,EAAIQ,MAAM,CAACV,EAJT;AAKL,UAAA,OAAO,EAAMM,KAAF,IAAa,KAAKD,iBAAL,CAAwBC,KAAxB,EAA+BI,MAAM,CAACV,EAAtC,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP,CADyC,CAMgC;AAC1E,OAPA,CADH,CADF;AAYAmB,MAAAA,WAAW,CAACC,eAAZ,GAA8B,KAA9B;AACAD,MAAAA,WAAW,CAAC,QAAD,CAAX,GAAwB;AACtBC,QAAAA,eAAe,EAAE,MADK;AAEtBC,QAAAA,KAAK,EAAE;AAFe,OAAxB;AAID,KArCO,CAuCR;;;AACA,UAAMO,OAAO,GAAG,EAAhB;;AACA,QAAI,KAAK9B,KAAL,CAAWC,OAAX,CAAmB8B,MAAnB,IAA6B,CAAjC,EAAmC;AACjCD,MAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EADiC,CACZ;AACtB;;AACD,QAAI,KAAKhC,KAAL,CAAWC,OAAX,CAAmB8B,MAAnB,IAA6B,CAAjC,EAAmC;AACjCD,MAAAA,OAAO,CAACE,IAAR,CAAa,MAAb,EADiC,CACX;AACvB,KA9CO,CAgDR;;;AAEA;AAAA;AACE;AACA;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,eAEE;AAAG,QAAA,SAAS,EAAIF,OAAO,CAACG,IAAR,CAAa,GAAb,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAFF,eAGE;AACE,QAAA,KAAK,EAAIZ,WADX;AAEE,QAAA,OAAO,EAAI,KAAKH,oBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHF,EAMGjB,OANH;AAFF;AAWD;;AA5HyB;;AAgI5B,eAAeF,GAAf","sourcesContent":["import React, { Component } from 'react'; //React hooks are using 'useSomething'\nimport Person from './Person/Person';\nimport styled from 'styled-components';\nimport './App.css';\n\nconst StyleButton = styled.button`\n  background-color: green;\n  color: white;\n  font: inherit;\n  border:'1x solid blue;\n  padding: '8px',\n  cursor: 'pointer',\n  ':hover': { // Radium feature\n    backgroundColor: 'lightgreen',\n    color: 'black'\n  }\n`;\n\nclass App extends Component {\n\n  state = { // Returns 2 elements (currentState, functionToUpdateState)\n    persons: [\n      { id: '1', name: 'Max', age: 28 },\n      { id: '2', name: 'Trist', age: 29},\n      { id: '3', name: 'Louis', age: 26 }\n    ],\n    otherState: 'Some other value',\n    showPersons: false\n  }\n\n  /* Function\n  switchNameHandler = (newName) => {\n    // On button click, change the properties of the given state\n    this.setState({\n      persons: [\n        { name: newName, age: 28 },\n        { name: 'Tristtttttt', age: 29},\n        { name: 'Louissssss', age: 26 }\n      ]\n    });\n  }*/\n\n  nameChangeHandler = ( event, id ) => {\n\n    // Gets the index of the passed through person \n    const personIndex = this.state.persons.findIndex( p => {\n      return p.id === id;\n    });\n\n    // Creates person variable and gets individual person from provided index\n    const person = {\n      ...this.state.persons[personIndex]\n    };\n\n    // Changes the name of the person chosen to be the name hard-coded\n    person.name = event.target.value;\n\n    // Assigns copies persons array to persons Const\n    const persons = [...this.state.persons];\n    \n    // Assigns individual person to matching person\n    persons[personIndex] = person;\n\n    this.setState({ persons: persons })\n\n  }\n\n  deletePersonHandler = (personIndex) => {\n    //const persons = this.state.persons.slice(); --> Slice without args, copies array\n    const persons = [...this.state.persons]; // More modern way to copying array\n    persons.splice(personIndex, 1); // Removes 1 person from array\n    this.setState({persons: persons});\n  }\n\n  togglePersonsHandler = () => {\n    // This gets true or false for if person is to show\n    const doesShow = this.state.showPersons;\n    // Sets the opposite state accordingly\n    this.setState({showPersons: !doesShow});\n  }\n\n  render () {\n\n    // Inline Styling\n    const buttonStyle = {\n      backgroundColor: 'green',\n      color:'white',\n      font: 'inherit',\n      border:'1x solid blue',\n      padding: '8px',\n      cursor: 'pointer',\n      ':hover': { // Radium feature\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n\n    //persons will hold div information\n    let persons = null;\n    // Here, a list of persons will be rendered to the DOM\n    if ( this.state.showPersons ) { // if TRUE\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return <Person \n              click = {() => this.deletePersonHandler(index)}\n              name = {person.name} \n              age = {person.age}\n              key = {person.id} \n              changed = {( event ) => this.nameChangeHandler( event, person.id )} /> // Key helps only the elements that changed to re-render, not the whole list\n          })}\n        </div> \n      );\n      buttonStyle.backgroundColor = 'red';\n      buttonStyle[':hover'] = {\n        backgroundColor: 'pink',\n        color: 'black'\n      }\n    }\n\n    // const --> Never assigning new value | let --> Variable could change\n    const classes = [];\n    if (this.state.persons.length <= 2){\n      classes.push('red'); // classes = ['red']\n    }\n    if (this.state.persons.length <= 1){\n      classes.push('bold'); // classes = ['red', 'bold']\n    }\n\n    // classes.join(' ') --> will join the class names as a string\n\n    return (\n      // JSX Code Below, not HTML\n      <div className=\"App\">\n        <h1>Hi, I am a React app</h1>  \n        <p className = {classes.join(' ')}>This is really working!</p>\n        <button \n          style = {buttonStyle}\n          onClick = {this.togglePersonsHandler}>Switch Name</button>\n        {persons} \n      </div>\n    );\n  }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}